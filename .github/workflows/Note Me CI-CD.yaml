name: Note Me CI/CD
on:
  pull-request:
    branches: [ master ]

jobs:
  build: üî® Build
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup JDK
    - name: Set up JDK 11
      uses: action/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '11'
    # Make gradle executable
    - name: Make gradle executable
      run: chmod +x ./gradlew

    # Execute build command with stacktrace
    - name: Build with gradle
      run: ./gradlew build --stacktrace


  lint-check:
    name: üîç Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint check
        run: ./gradlew lint # Execute gradle script to perform lint checks

      - name: Generate lint report
        uses: actions/upload-artifact@v2
        with: # Define extra parameters
          name: lint-report.html # Name of the artifact to be uploaded
          path: app/build/reports/lint-results-debug.html # Path where artifact will be located


  unit-tests: #Defines another job fro unit testing
    name: üß™ Unit tests
    needs: [ lint-check ] # this jobs execution depends on the lint check to pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute unit tests
        run: ./gradlew test --stacktrace # Execute tests with gradle with stacktrace

      - name: Generate report # Generates test reports
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-report.html
          path: app/build/reports/testDebugUnitTest/

  generating-apk: # Job to generate debug apk
    name: ‚öô Generate APK
    needs: [ build,lint-check,unit-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'

      - name: Build debug apk
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload debug apk
        uses: actions/upload-artifact@v1
        with:
          name: Note-Me-Debug
          path: app/build/outputs/apk/debug/app-debug.apk

  create-release: # Job to create new github release and upload the generated file
    name: üéâ Create release
    needs: [ generating-apk ]
    runs-on: ubuntu-latest
    steps:

      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: Note-Me-Debug

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          with:
            tag_name: ${{github.ref}}
            release_name: Note Me ${{github.ref}}

      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: Note-Me-Debug/app-debug.apk
          asset_name: Note Me.apk
          asset_content_type: application/zip

  firebase-deployment:
    name: üì® Deploy to firebase app distribution
    needs: [ generate-apk ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: Note Me

      - name: Upload Artifact to firebase App distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.2.2
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: testers
          file: Note-Me/app-debug.apk